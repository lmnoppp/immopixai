import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

// Force le runtime Node.js
export const dynamic = 'force-dynamic';
export const runtime = 'nodejs';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  if (!process.env.OPENAI_API_KEY) {
    console.error('üí• [API-CHAT] Variable d\'environnement OpenAI manquante');
    return NextResponse.json(
      { error: 'Configuration serveur incompl√®te. Le service est indisponible.' },
      { status: 500 }
    );
  }

  try {
    const body = await request.json();
    const { message, conversationHistory = [] } = body;
    
    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Le param√®tre "message" est manquant ou invalide.' },
        { status: 400 }
      );
    }

    // V√©rification de l'authentification (via middleware)
    const userId = request.headers.get('x-user-id');
    if (!userId) {
      console.error('‚ùå [API-CHAT] Pas d\'ID utilisateur dans le header');
      return NextResponse.json(
        { error: 'Authentification requise. Session invalide ou expir√©e.' },
        { status: 401 }
      );
    }

    console.info(`[API-CHAT] Requ√™te de conversation pour l'utilisateur: ${userId}`);
    console.info(`[API-CHAT] Message re√ßu: ${message}`);

    // Construire l'historique des messages avec le contexte
    const messages: Array<{role: 'system' | 'user' | 'assistant', content: string}> = [
      {
        role: "system" as const,
        content: `Tu es ImmoPix AI, un assistant IA sp√©cialis√© dans l'am√©lioration d'images immobili√®res. 

CONTEXTE IMPORTANT: Tu participes √† une conversation continue. L'utilisateur peut r√©pondre "oui", "non", "d'accord" √† tes suggestions pr√©c√©dentes.

PERSONNALIT√â:
- Professionnel mais chaleureux
- Expert en photographie immobili√®re  
- Toujours pr√™t √† aider
- Comprend le contexte de la conversation
- Utilise des emojis avec mod√©ration

FONCTIONNALIT√âS:
- Analyse gratuite d'images immobili√®res
- Retouches payantes (1 cr√©dit par retouche)
- Suppression d'objets (vaisselle, meubles, clutter)
- Am√©lioration de l'√©clairage et des couleurs
- Modification de la d√©coration
- Ajout d'√©l√©ments (papier peint, couleurs murales)

R√àGLES DE CONVERSATION:
- Si l'utilisateur dit "oui" apr√®s avoir propos√© une analyse ‚Üí Demande l'image √† am√©liorer
- Si l'utilisateur dit "non" ‚Üí Propose autre chose ou reste disponible
- Si l'utilisateur dit "d'accord" ‚Üí Continue selon le contexte (souvent demander l'image)
- Si l'utilisateur dit "am√©liore ces d√©fauts" apr√®s une analyse ‚Üí Demande l'image √† retoucher
- TIENS COMPTE de tes analyses pr√©c√©dentes dans la conversation
- √âvite de r√©p√©ter "Bonjour" si la conversation a d√©j√† commenc√©

R√àGLES:
- R√©ponds toujours en fran√ßais
- Reste dans le contexte immobilier et de la conversation
- Pour les retouches, demande toujours une image d'abord
- Sois concis mais informatif
- Adapte ta r√©ponse au contexte pr√©c√©dent
- Guide l'utilisateur vers l'upload d'image quand c'est pertinent`
      }
    ];

    // Ajouter les 3 derniers messages de conversation pour le contexte
    if (conversationHistory && Array.isArray(conversationHistory)) {
      const recentMessages = conversationHistory.slice(-6); // 3 √©changes (user + assistant)
      recentMessages.forEach(msg => {
        if (msg.type === 'user') {
          messages.push({
            role: 'user' as const,
            content: msg.text || message
          });
        } else if (msg.type === 'assistant' || msg.type === 'ai') {
          messages.push({
            role: 'assistant' as const,
            content: msg.text || ''
          });
        }
      });
    }

    // Ajouter le message actuel
    messages.push({
      role: "user" as const,
      content: message
    });

    // Appel √† l'API OpenAI pour g√©n√©rer une r√©ponse conversationnelle
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages,
      max_tokens: 300,
      temperature: 0.7,
    });

    const response = completion.choices[0]?.message?.content;
    
    if (!response) {
      throw new Error('Pas de r√©ponse g√©n√©r√©e par OpenAI');
    }

    console.info(`[API-CHAT] R√©ponse g√©n√©r√©e avec succ√®s pour l'utilisateur: ${userId}`);

    return NextResponse.json({
      success: true,
      response: response.trim(),
    });

  } catch (error) {
    console.error('üí• [API-CHAT] Erreur lors de la g√©n√©ration de r√©ponse:', error);
    const errorMessage = error instanceof Error ? error.message : 'Une erreur inconnue est survenue.';
    
    return NextResponse.json(
      { error: `Erreur lors de la g√©n√©ration de r√©ponse: ${errorMessage}` },
      { status: 500 }
    );
  }
}
